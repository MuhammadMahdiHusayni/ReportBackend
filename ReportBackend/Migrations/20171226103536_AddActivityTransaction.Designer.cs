// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using ReportBackend.Data;
using System;

namespace ReportBackend.Migrations
{
    [DbContext(typeof(ReportingContext))]
    [Migration("20171226103536_AddActivityTransaction")]
    partial class AddActivityTransaction
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ReportBackend.Models.AcitivityAttendance", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<int>("ActivityId");

                    b.HasKey("UserId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("AcitivityAttendance");
                });

            modelBuilder.Entity("ReportBackend.Models.Action", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("MeetingId");

                    b.HasKey("ActionId");

                    b.HasIndex("MeetingId");

                    b.ToTable("Action");
                });

            modelBuilder.Entity("ReportBackend.Models.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActivityTypeCode");

                    b.Property<DateTimeOffset>("DateTime");

                    b.Property<string>("DepartmentCode");

                    b.Property<string>("Description");

                    b.Property<string>("Location");

                    b.Property<string>("Title");

                    b.HasKey("ActivityId");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("ReportBackend.Models.ActivityType", b =>
                {
                    b.Property<int>("ActivityTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.HasKey("ActivityTypeId");

                    b.ToTable("ActivityType");
                });

            modelBuilder.Entity("ReportBackend.Models.Agenda", b =>
                {
                    b.Property<int>("AgendaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("MeetingId");

                    b.HasKey("AgendaId");

                    b.HasIndex("MeetingId");

                    b.ToTable("Agenda");
                });

            modelBuilder.Entity("ReportBackend.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("ReportBackend.Models.Logging", b =>
                {
                    b.Property<Guid>("LoggingId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AffectedId");

                    b.Property<string>("AffectedTable");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("DeviceUuid");

                    b.Property<string>("IsVirtual");

                    b.Property<string>("Manufacturer");

                    b.Property<string>("Model");

                    b.Property<string>("Platform");

                    b.Property<string>("Serial");

                    b.Property<string>("UserId");

                    b.HasKey("LoggingId");

                    b.ToTable("Loggings");
                });

            modelBuilder.Entity("ReportBackend.Models.Meeting", b =>
                {
                    b.Property<int>("MeetingId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("DateTime");

                    b.Property<string>("Location");

                    b.Property<string>("Note");

                    b.Property<string>("Title");

                    b.HasKey("MeetingId");

                    b.ToTable("Meeting");
                });

            modelBuilder.Entity("ReportBackend.Models.MeetingAttendance", b =>
                {
                    b.Property<int>("MeetingId");

                    b.Property<Guid>("UserId");

                    b.HasKey("MeetingId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MeetingAttendance");
                });

            modelBuilder.Entity("ReportBackend.Models.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsOpen");

                    b.Property<string>("OverallPlan");

                    b.Property<string>("Title");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.Property<Guid>("UserId");

                    b.HasKey("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("ReportBackend.Models.ProjectMember", b =>
                {
                    b.Property<Guid>("ProjectId");

                    b.Property<Guid>("UserId");

                    b.Property<string>("ProjectPositionCode");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMember");
                });

            modelBuilder.Entity("ReportBackend.Models.ProjectPosition", b =>
                {
                    b.Property<int>("ProjectPositionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.HasKey("ProjectPositionId");

                    b.ToTable("ProjectPosition");
                });

            modelBuilder.Entity("ReportBackend.Models.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("NextPlan");

                    b.Property<Guid>("ProjectId");

                    b.Property<int>("ReportCount");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("ReportId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("ReportBackend.Models.Resource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.HasKey("ResourceId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("ReportBackend.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<string>("DepartmentCode");

                    b.Property<string>("Note");

                    b.Property<DateTimeOffset?>("TransactionDate");

                    b.Property<string>("TransactionTypeCode");

                    b.Property<int>("TreasuryId");

                    b.Property<Guid>("UserId");

                    b.HasKey("TransactionId");

                    b.HasIndex("TreasuryId");

                    b.HasIndex("UserId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("ReportBackend.Models.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionType");
                });

            modelBuilder.Entity("ReportBackend.Models.Treasury", b =>
                {
                    b.Property<int>("TreasuryId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AccountBalance");

                    b.Property<string>("AccountName");

                    b.HasKey("TreasuryId");

                    b.ToTable("Treasury");
                });

            modelBuilder.Entity("ReportBackend.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ReportBackend.Models.UserResource", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<int>("ResourceId");

                    b.HasKey("UserId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.ToTable("UserResource");
                });

            modelBuilder.Entity("ReportBackend.Models.AcitivityAttendance", b =>
                {
                    b.HasOne("ReportBackend.Models.Activity", "Activity")
                        .WithMany("AcitivityAttendances")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReportBackend.Models.User", "User")
                        .WithMany("AcitivityAttendances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReportBackend.Models.Action", b =>
                {
                    b.HasOne("ReportBackend.Models.Meeting", "Meeting")
                        .WithMany("Actions")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReportBackend.Models.Agenda", b =>
                {
                    b.HasOne("ReportBackend.Models.Meeting", "Meeting")
                        .WithMany("Agendas")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReportBackend.Models.MeetingAttendance", b =>
                {
                    b.HasOne("ReportBackend.Models.Meeting", "Meeting")
                        .WithMany("MeetingAttendances")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReportBackend.Models.User", "User")
                        .WithMany("MeetingAttendances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReportBackend.Models.Project", b =>
                {
                    b.HasOne("ReportBackend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReportBackend.Models.ProjectMember", b =>
                {
                    b.HasOne("ReportBackend.Models.Project", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReportBackend.Models.User", "User")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReportBackend.Models.Report", b =>
                {
                    b.HasOne("ReportBackend.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReportBackend.Models.Transaction", b =>
                {
                    b.HasOne("ReportBackend.Models.Treasury", "treasury")
                        .WithMany()
                        .HasForeignKey("TreasuryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReportBackend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReportBackend.Models.UserResource", b =>
                {
                    b.HasOne("ReportBackend.Models.Resource", "Resource")
                        .WithMany("UserResources")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReportBackend.Models.User", "User")
                        .WithMany("UserResources")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
